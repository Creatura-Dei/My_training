



Если элемент определён как блочный, то он будет вести себя следующим образом:

    .Начнётся с новой строки
    
    .Будет расширяться вдоль строки таким образом, чтобы заполнить всё пространство, доступное в её контейнере. Зачастую значит, что блок станет такой же ширины, как и его контейнер, заполняя 100% доступного пространства.
    
    .Будут применяться свойства width и height.

    .Внешние и внутренние отступы, рамка будет отодвигать от него другие элементы.





Если элемент имеет тип отображения inline (строчный), то:

    Он не будет начинаться с новой строки.

    Свойства width и height не будут применяться.

    Вертикальные внешние и внутренние отступы, рамки будут применяться, но не будут отодвигать другие строчные элементы.
    Горизонтальные внешние и внутренние отступы, рамки будут применяться и будут отодвигать другие строчные элементы.


Элементы a, span, em, strong - примеры по умолчанию строчных элементов.

Тип отображения, прим к элементу, определяется значениями свойства display, такими как block и inline, и относится к ВНЕШНЕМУ значению display. 
================================================


       ВНУТРЕННИЙ И ВНЕШНИЙ ТИПЫ ОТОБРАЖЕНИЙ

Как уже говорилось выше, каждый блок в CSS имеет внешний тип отображения, который определяет, блочный он или строчный.

Однако мы можем изменить внутренний тип отображения, используя такие значения display как flex. Если мы установим display: flex; для элемента, внешний тип отображения примет значение block, но внутренний тип изменится на flex.
Любые прямые дочерние элементы этого блока станут flex-объектами и будут размещены в соответствии с правилами, изложенными в спецификации Flexbox.



        Существует два типа блочных моделей:
    
Стандартная и альтернативная.

==============================

            СТАНДАРТНАЯ БЛОЧНАЯ МОДЕЛЬ


Составляя блочный элемент в CSS мы имеем:

    .Содержимое: область, где отображается контент, размер которой можно изменить с помощью width и height.

    .Внутренний отступ: отступы располагаются вокруг содержимого в виде пустого просторанства. Их размер контролируется с помощью padding и связанных свойств.

    .Рамка: рамка оборачивает содержимое и внутренние отступы. Её размер и стиль можно контролировать с помощью border и связанных свойств.

    .Внешний отступ: внешний слой, заключающий в себе содержимое, внутренний отступ и рамки, представляет собой пространство между текущим и другими элементами. Контролим margin.



Пространство, занимаемое нашим объектом с использованием стандартной блочной модели, на самом деле будет равно 410px в ширину (350 + 25 + 25 + 5 + 5) и 210px в высоту (150 + 25 + 25 + 5 + 5), поскольку отступы и рамки добавляются к размерам поля содержимого.


ТО ЕСТЬ - показатели суммируются, кроме  margin.

=================================================

        АЛЬТЕРНАТИВНАЯ блочная модель


При использовании альтернативной модели любая ширина - это ширина видимой части элемента на странице, поэтому ширина области содержимого будет равна общей ширине минус ширина рамки и внутреннего отступа.

ПО умолчанию браузеры используют стандартную блочную модель. Если нужно использовать альтернативную блочную модель для элемента, нужно:

    Установить для элемента свойство 
    box-sizing: border-box; 

    С помощью этого вы говорите браузеру о том, что рамка элемента определяется любыми размерами, которые вы устанавливаете.


.box {
    box-sizing: border-box;
}

Но зачастую распространённый выбор среди разрабов, устанавливают свойство box-sizing для элемента <html>, затем задайте всем элементам наследование этого значения (inherit). 

    html {
        box-sizing: border-box;
    }

    *, *::before, *::after {
        box-sizing: inherit;
    }


ОТТОЧЕННЫЙ ВАРИАНТ: 


    html { 
        box-sizing: border-box; 
    }

*:not(img), *:before, *:after { 
    box-sizing: inherit; 
    }





ИЛИ ЖЕ: 

    html { box-sizing: border-box; }
*, *:before, *:after { box-sizing: inherit; }
img { box-sizing: content-box; }
===============================================

Схлопывание внешних отступов


Если у вас есть два элемента, внешние отступы которых соприкасаются, и оба значения margin положительные, то эти значения будут объединены в одно, равное большему из двух значений. А если одно или оба значения отрицательны, то сумма отрицательных значений будет вычтена из общей суммы.


Отступы плавающих и абсолютно позиционированных элементов никогда не схлопываются.

        Схлопывание внешних отступов происходит в трёх случаях:

    1) Соседние элементы (siblings)
  Схлопываются отступы соседних элементов (за исключением случая, когда к последнему элементу применено свойство clear).

    2) Родительский и первый/последний дочерние элементы.
  Если отсутствуют границы (border), внутренние отступы (padding), строчное содержимое (inline, inline-block), height, min-height или max-height для отделения отступов margin-bottom родительского блока от margin-bottom отступов одного или нескольких его дочерних элементов/блоков, то внешние отступы схлопываются.
  
    3) Пустые блоки
  Если отсутствуют границы (border), внутренние отступы (padding), строчное содержимое (inline/inline-block), height или min-height для отделения margin-top верхнего отступа этого блока от его margin-bottom нижнего отступа, то верхние и нижние внешние отступы этого блока схлопываются.


  Как и в любой другой концепции, здесь тоже бывают исключения, поэтому схлопывание не работает в следующих случаях:
с «плавающими» блоками, которые используют свойство float;
с корневыми элементами(html, body);
с абсолютно позиционируемыми элементами, имеющих свойство и значение position:absolute;
в строчных элементах.
=================================================

                    РАМКА

Если вы используете альтернативную блочную модель, то размер рамки уменьшает поле контента своего блока, так как значения рамки входят в заданные ему width и height. 

Для установки ширины, стиля или цвета всех рамок:
        border-width
        border-style
        border-color
  Однако если нужно установить стиль индивидуально: 
        border-top-width
      То есть, рамка-положение-ширина
=================================================

                    Padding

Внутренний отступ. В отличии от внешних отступов (margin) - нельзя использовать отрицательные значения для padding: они должны быть положительными или равными 0. Любой применённый к элементам фон будет отображаться под областью padding, поэтому внутренний отступ обычно используется, чтобы отодвинуть контент от рамок.


Все приведённые свойства могут быть применимы и к span.
Только у span по вертикали не применяется свойство на тексте 
=================================================


            display: inline-block

Элемент с этим свойство: 
    Применяет свойства width и height
    Использование padding, margin и border приведёт к тому, что другие элементы

Он не перенесётся на новую строку и станет больше, чем его содержимое, только если явно задам свойства ширины и высоты.


Зачастую используют это в панели навигации. 
